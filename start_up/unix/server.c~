#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define MAXDATASIZE 1024
#define SERVERPORT 8000
#define MAXCONN_NUM 10

int main()
{
    char buf[MAXDATASIZE];
    int sockfd, new_fd, numbytes;
    struct sockaddr_in server_addr;
    /*struct sockaddr_in client_addr;*/
    int sin_size;
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket error");
        return 1;
    }

    memset(&server_addr, 0, sizeof(struct sockaddr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVERPORT);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(sockfd, (struct sockaddr *) &server_addr, sizeof(struct sockaddr)) == -1) {
        perror("bind error");
        return 1;
    }

    if (listen(sockfd, MAXCONN_NUM) == -1) {
        perror("listen error");
        return 1;
    }

    while (1) {
        sin_size = sizeof(struct sockaddr_in);
        /*
         *  bind，listen，accept是服务器端用的函数；
         *    accept调用时，服务器会一直阻塞到一个客户程序发出了连接；accept成功时返回最后服务器端的文件描述符，
         *          这个时候服务器端就可以向该描述符写信息了；
         */
        if ((new_fd = accept(sockfd, (struct sockaddr *)&server_addr, &sin_size)) == -1) {
            perror("accept error");
            continue;
        }
        printf("server: got connection from %d\n", inet_ntoa(server_addr.sin_addr));

        /*从对应的文件描述符中读取数据*/
        if ((numbytes = recv(new_fd, buf, MAXDATASIZE, 0)) == -1) {
            perror("recv error");
            return 1;
        }
        if (numbytes) {
            buf[numbytes] = '\0';
            printf("received: %s\n", buf);
            sleep(3);
        }
        printf("send: hi~~\n");

        /*向对应的文件描述符中写入数据*/
        if (send(new_fd, "hi~~", 5, 0) == -1) {
            perror("send error");
            return 1;
        }
        close(new_fd);
    }
    return 0;
}
